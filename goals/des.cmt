const ip_map = [
	58, 50, 42, 34, 26, 18, 10,  2,
	60, 52, 44, 36, 28, 20, 12,  4,
	62, 54, 46, 38, 30, 22, 14,  6,
	64, 56, 48, 40, 32, 24, 16,  8,
	57, 49, 41, 33, 25, 17,  9,  1,
	59, 51, 43, 35, 27, 19, 11,  3,
	61, 53, 45, 37, 29, 21, 13,  5,
	63, 55, 47, 39, 31, 23, 15,  7
]

-- TODO: do inverses automatically
const ip_map_inv = [
	40,  8, 48, 16, 56, 24, 64, 32,
	39,  7, 47, 15, 55, 23, 63, 31,
	38,  6, 46, 14, 54, 22, 62, 30,
	37,  5, 45, 13, 53, 21, 61, 29,
	36,  4, 44, 12, 52, 20, 60, 28,
	35,  3, 43,  1, 51, 19, 59, 27,
	34,  2, 42, 10, 50, 18, 58, 26,
	33,  1, 41,  9, 49, 17, 57, 25
]

const e_map = [
	32,  1,  2,  3,  4,  5,  4,  5,
	 6,  7,  8,  9,  8,  9, 10, 11,
	12, 13, 12, 13, 14, 15, 16, 17,
	16, 17, 18, 19, 20, 21, 20, 21,
	22, 23, 24, 25, 24, 25, 26, 27,
	28, 29, 28, 29, 30, 31, 32,  1
]

const p_map = [
	16,  7, 20, 21, 29, 12, 28, 17,
	 1, 15, 23, 26,  5, 18, 31, 10,
	 2,  8, 24, 14, 32, 27,  3,  9,
	19, 13, 30,  6, 22, 11,  4, 25
]

-- The S boxes are represented as arrays. Just using the 6-bit input as
-- the array index will give you the desired 4-bit result
const S1 = [
	14,  0,  4, 15, 13,  7,  1,  4,
	 2, 14, 15,  2, 11, 13,  8,  1,
	 3, 10, 10,  6,  6, 12, 12, 11,
	 5,  9,  9,  5,  0,  3,  7,  8,
	 4, 15,  1, 12, 14,  8,  8,  2,
	13,  4,  6,  9,  2,  1, 11,  7,
	15,  5, 12, 11,  9,  3,  7, 14,
	 3, 10, 10,  0,  5,  6,  0, 13
]

const S2 = [
	15,  3,  1, 13,  8,  4, 14,  7,
	 6, 15, 11,  2,  3,  8,  4, 14,
	 9, 12,  7,  0,  2,  1, 13, 10,
	12,  6,  0,  9,  5, 11, 10,  5,
	 0, 13, 14,  8,  7, 10, 11,  1,
	10,  3,  4, 15, 13,  4,  1,  2,
	 5, 11,  8,  6, 12,  7,  6, 12,
	 9,  0,  3,  5,  2, 14, 15,  9
]

const S3 = [
	10, 13,  0,  7,  9,  0, 14,  9,
	 6,  3,  3,  4, 15,  6,  5, 10,
	 1,  2, 13,  8, 12,  5,  7, 14,
	11, 12,  4, 11,  2, 15,  8,  1,
	13,  1,  6, 10,  4, 13,  9,  0,
	 8,  6, 15,  9,  3,  8,  0,  7,
	11,  4,  1, 15,  2, 14, 12,  3,
	 5, 11, 10,  5, 14,  2,  7, 12
]

const S4 = [
	 7, 13, 13,  8, 14, 11,  3,  5,
	 0,  6,  6, 15,  9,  0, 10,  3,
	 1,  4,  2,  7,  8,  2,  5, 12,
	11,  1, 12, 10,  4, 14, 15,  9,
	10,  3,  6, 15,  9,  0,  0,  6,
	12, 10, 11,  1,  7, 13, 13,  8,
	15,  9,  1,  4,  3,  5, 14, 11,
	 5, 12,  2,  7,  8,  2,  4, 14
]

const S5 = [
	 2, 14, 12, 11,  4,  2,  1, 12,
	 7,  4, 10,  7, 11, 13,  6,  1,
	 8,  5,  5,  0,  3, 15, 15, 10,
	13,  3,  0,  9, 14,  8,  9,  6,
	 4, 11,  2,  8,  1, 12, 11,  7,
	10,  1, 13, 14,  7,  2,  8, 13,
	15,  6,  9, 15, 12,  0,  5,  9,
	 6, 10,  3,  4,  0,  5, 14,  3
]

const S6 = [
	12, 10,  1, 15, 10,  4, 15,  2,
	 9,  7,  2, 12,  6,  9,  8,  5,
	 0,  6, 13,  1,  3, 13,  4, 14,
	14,  0,  7, 11,  5,  3, 11,  8,
	 9,  4, 14,  3, 15,  2,  5, 12,
	 2,  9,  8,  5, 12, 15,  3, 10,
	 7, 11,  0, 14,  4,  1, 10,  7,
	 1,  6, 13,  0, 11,  8,  6, 13
]

const S7 = [
	 4, 13, 11,  0,  2, 11, 14,  7,
	15,  4,  0,  9,  8,  1, 13, 10,
	 3, 14, 12,  3,  9,  5,  7, 12,
	 5,  2, 10, 15,  6,  8,  1,  6,
	 1,  6,  4, 11, 11, 13, 13,  8,
	12,  1,  3,  4,  7, 10, 14,  7,
	10,  9, 15,  5,  6,  0,  8, 15,
	 0, 14,  5,  2,  9,  3,  2, 12
]

const S8 = [
	13,  1,  2, 15,  8, 13,  4,  8,
	 6, 10, 15,  3, 11,  7,  1,  4,
	10, 12,  9,  5,  3,  6, 14, 11,
	 5,  0,  0, 14, 12,  9,  7,  2,
	 7,  2, 11,  1,  4, 14,  1,  7,
	 9,  4, 12, 10, 14,  8,  2, 13,
	 0, 15,  6, 12, 10,  9, 13,  0,
	15,  3,  3,  5,  5,  6,  8, 11
]

const pc1 = [
	57, 49, 41, 33, 25, 17, 9,  1,
	58, 50, 42, 34, 26, 18, 10, 2,
	59, 51, 43, 35, 27, 19, 11, 3,
	60, 52, 44, 36, 63, 55, 47, 39,
	31, 23, 15,  7, 62, 54, 46, 38,
	30, 22, 14,  6, 61, 53, 45, 37,
	29, 21, 13,  5, 28, 20, 12,  4
]

const pc2 = [
	14, 17, 11, 24,  1,  5,  3, 28,
	15,  6, 21, 10, 23, 19, 12,  4,
	26,  8, 16,  7, 27, 20, 13,  2,
	41, 52, 31, 37, 47, 55, 30, 40,
	51, 45, 33, 48, 44, 49, 39, 56,
	34, 53, 46, 42, 50, 36, 29, 32
]

fun PC1(b : bits) : bits
	return permute(b, pc1, 48);

fun PC2(b : bits) : bits
	return permute(b, pc2, 48);

-- initial permutation
fun IP(b : bits) : bits
	return permute(b, ip_map, 64);

-- final permutation == IP^-1
fun FP(b : bits) : bits
	return permute(b, ip_map_inv, 64);

-- block expansion
fun E(k : bits) : bits
	return permute(k, e_map, 48)

-- block permutation
fun P(b : bits) : bits
	return permute(b, p_map, 32)

fun S(b : bits) : bits
	var f1 = b[ 1,  6]
	var f2 = b[ 7, 12]
	var f3 = b[13, 18]
	var f4 = b[19, 24]
	var f5 = b[25, 30]
	var f6 = b[31, 36]
	var f7 = b[37, 42]
	var f8 = b[43, 48]

	f1 = tobits(S1[toint(f1)], 4)
	f2 = tobits(S2[toint(f2)], 4)
	f3 = tobits(S3[toint(f3)], 4)
	f4 = tobits(S4[toint(f4)], 4)
	f5 = tobits(S5[toint(f5)], 4)
	f6 = tobits(S6[toint(f6)], 4)
	f7 = tobits(S7[toint(f7)], 4)
	f8 = tobits(S8[toint(f8)], 4)

	return f1 ||| f2 ||| f3 ||| f4 ||| f5 ||| f6 ||| f7 ||| f8

fun des_f(rk b : bits) : bits
	return P(S(E(b) ^ rk))

fun shifts(round : int) : int
	if round == 1 || round == 2 || round == 9 || round == 16
		return 1
	else
		return 2

fun des(b k : bits) : bits
	var l r : bits
	var K : bits -- round key
	var C D : bits

	b = IP(b)
	l = b[ 1, 32]
	r = b[33, 64]

	k = PC1(k)
	C = k[ 1, 28]
	D = k[29, 56]

	for i in 1..16
		var T : bits
		-- rotate the partial keys
		C = C <<< shifts(i)
		D = D <<< shifts(i)

		-- make the round key
		K = PC2(C ||| D)

		-- apply the round function and do the Feistel flip
		T = l ^ des_f(K, r)
		l = r
		r = T
	b = r ||| l

	b = FP(b)
	return b
