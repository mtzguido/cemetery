
fun K(t : int) : bits
	if t < 0
		error "negative t"
	else if t < 20
		return < 0x5a827999 :: 32 >
	else if t < 40
		return < 0x6ed9eba1 :: 32 >
	else if t < 60
		return < 0x8f1bbcdc :: 32 >
	else if t < 80
		return < 0xca62c1d6 :: 32 >
	else
		error "t is bigger than 80"

fun H(t : int) : bits
	if t == 0
		return < 0x67452301 :: 32 >
	else if t == 1
		return < 0xefcdab89 :: 32 >
	else if t == 2
		return < 0x98badcfe :: 32 >
	else if t == 3
		return < 0x10325476 :: 32 >
	else if t == 4
		return < 0xc3d2e1f0 :: 32 >
	else
		error "wat"

fun f(t : int, x y z : bits) : bits
	if t < 0
		error "negative t"
	else if t < 20
		return (x & y) ^ (~x & z)
	else if t < 40
		return x ^ y ^ z
	else if t < 60
		return (x & y) ^ (x & z) ^ (y & z)
	else if t < 80
		return x ^ y ^ z
	else
		error "t is bigger than 80"

fun pad(m : bits) : bits
	var l = length(m)
	var k = (447 - l) % 512 -- should always be the positive remainder

	if k < 0
		error "negative k?"

	-- append a single 1 bit, and 'k' 0 bits
	m = m ||| < 1 :: 1 > ||| zero(k) ||| tobits(l, 64)

	-- length(m) should always be a multiple of 512 bit
	if !(length(m) % 512 == 0)
		error "weird length"

	return m

fun sha1(m : bits) : bits
	var i t N : int
	var a b c d e A B C D E T : bits
	var W : bits

	m = pad(m)
	N = length(m) / 512

	A = H(0)
	B = H(1)
	C = H(2)
	D = H(3)
	E = H(4)

	for i in 1..N
		var Mi = m[(i - 1) * 512, i * 512 - 1]

		W = Mi
		for t in 16..79
			var T : bits
			T = W[(t - 3) * 32, (t - 3) * 32 + 31]
			T = T ^ W[(t - 8) * 32, (t - 8) * 32 + 31]
			T = T ^ W[(t - 14) * 32, (t - 14) * 32 + 31]
			T = T ^ W[(t - 16) * 32, (t - 16) * 32 + 31]

			W = W ||| (T <<< 1)

		a = A
		b = B
		c = C
		d = D
		e = E

		for t in 0..79
			-- here, addition should be interpreted as
			-- modulo 32 bit.
			T = (a <<< 5) + f(t, b, c, d) + e + K(t) + W[t * 32, t * 32 + 31]
			e = d
			d = c
			c = b <<< 30
			b = a
			a = T

		A = a + A
		B = b + B
		C = c + C
		D = d + D
		E = e + E

	return A ||| B ||| C ||| D ||| E
