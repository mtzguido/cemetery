const important_value = 25 -- Type inferred? At least for constants that
			   -- might be doable/easy

var counter : int
var use_something : bool
var use_something_else = false

external prog_name : string

struct cbc_status
	offset : int
	buf : bytes

fun collatz (x : int) : int
	if x == 1
		return 1
	else if x % 2 == 0
		return collatz (x / 2)
	else
		return collatz(3 * x + 1)

fun gcd (x y : int) : int
	if y == 0
		return x
	else
		return gcd(y, x % y)

fun crap (x y z : int) : int
	x += y
	z += x
	y -= x + y
	return z

--fun types (x : int, p : bool, y z : int) : (int, int)
--	return (x, z)

fun long_line (x : int) : int
	var z : int

	z = x + x + x + x + x + x + x + x + x + x \
		+ x + x + x
	return z

fun otp (p k : bytes) : bytes
	var c : bytes

	c = p ^ trunc(k) -- Will fail if k is shorter than p
	return c

fun repKeyXor(p k : bytes) : bytes
	var c : bytes

	c = p ^ repeat(k) -- How would this work? Think about it some more
	return c

{- Type inferences -}
fun literals() : void
	var a = "blah blah blah" -- Should be inferred to "string"
	var b = { 0x41, 0x42, 0x43 } -- Should be inferred to bytes(3)
				     -- even though it's "ABC" in ascii
	var c = 25	-- Int
	var d = 2.0	-- Double (no float for now)

	var p = (2,5)	-- Should we have pairs?
	var l = p.1
	var r = p.2

	var A = [1,2,3,4,5]	-- [Int] (Int array) Bound checked or not? Offer both?
	var x = A[0]
	var y = A[1]
