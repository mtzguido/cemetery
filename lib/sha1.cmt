static fun f(t : int, x y z : bits) : bits
	if t < 0
		error "negative t"
	else if t < 20
		return (x & y) ^ (~x & z)
	else if t < 40
		return x ^ y ^ z
	else if t < 60
		return (x & y) ^ (x & z) ^ (y & z)
	else if t < 80
		return x ^ y ^ z
	else
		error "t is bigger than 80"

static fun pad(m : bits) : bits
	var l = length(m)
	var k = (447 - l) % 512 -- should always be the positive remainder
	var r : bits

	if k < 0
		error "negative k?"

	-- append a single 1 bit, and 'k' 0 bits
	r = m ||| <1 :: 1> ||| <0 :: k> ||| tobits(l, 64)

	-- length(m) should always be a multiple of 512 bit
	if !(length(r) % 512 == 0)
		error "weird length"

	return r

fun sha1(m0 : bits) : bits
	var N : int
	var a b c d e A B C D E T : bits
	var W : bits[80]
	var m : bits

	var K = [<0x5a827999 :: 32>, <0x6ed9eba1 :: 32>, <0x8f1bbcdc :: 32>, <0xca62c1d6 :: 32>]

	m = pad(m0)
	N = length(m) / 512

	A = < 0x67452301 :: 32 >
	B = < 0xefcdab89 :: 32 >
	C = < 0x98badcfe :: 32 >
	D = < 0x10325476 :: 32 >
	E = < 0xc3d2e1f0 :: 32 >

	for i in 1..N
		var Mi = m[[(i - 1) * 512, i * 512 - 1]]

		for t in 0..15
			W[t] = Mi[[t * 32, t * 32 + 31]]

		for t in 16..79
			var T : bits
			T = W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16]
			W[t] = T <<< 1

		a = A
		b = B
		c = C
		d = D
		e = E

		for t in 0..79
			-- here, addition should be interpreted as
			-- modulo 32 bit.
			T = (a <<< 5) + f(t, b, c, d) + e + K[t / 20] + W[t]
			e = d
			d = c
			c = b <<< 30
			b = a
			a = T

		A = a + A
		B = b + B
		C = c + C
		D = d + D
		E = e + E

	return A ||| B ||| C ||| D ||| E
